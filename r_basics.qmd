---
title: <font size="7"><b>R basics</b></font>
toc: true
toc-depth: 2
toc-location: left
number-sections: true
highlight-style: pygments
format:
  html:
    df-print: kable
    code-fold: show
    code-tools: true
    css: styles.css
    link-external-icon: true
    link-external-newwindow: true  
---

```{r,echo=FALSE,message=FALSE}

options("digits"=5)
options("digits.secs"=3)

```

 

::: {.alert .alert-info}
## **Objetives** {.unnumbered .unlisted}

-   Revisit the basic syntax and data structures in R

-   Get familiar with documentation and help resources
:::

 

## What is R?

-   A **free** [Domain-Specific-Language (DSL)](https://en.wikipedia.org/wiki/Domain-specific_language) for statistics and data analysis
-   A collection of over 19514 (may-12-2023) libraries
-   A large and active community across industry and academia
-   **A way to talk "directly" to your computer**

Historically:

-   Based on the S Programming Language
-   Around 20 years old (Lineage dates from 1975 - almost 40 years ago)

<img src="images/Rinterf.jpeg" alt="R" height="600" width="800"/>

 

## Rstudio

Integrated development environment (IDE) for R. Includes:

-   A console
-   Syntax-highlighting editor that supports direct code execution
-   Tools for plotting, history, debugging and workspace management

<img src="images/Rstudio.jpeg" alt="R" height="500" width="800"/>

------------------------------------------------------------------------

## Elements of the R language

-   Vectors
-   Lists
-   Matrices
-   Data Frames
-   Functions (including operators)
-   Attributes
-   ~~Tables~~
-   ~~Arrays~~
-   ~~Environments~~

<font size="5">Data structure</font>

The basic data structure in R is the vector. There are two basic types of vectors: atomic vectors and lists.

They have three common properties:

-   Type, `typeof()` (\~ class/mode)
-   Length, `length()` (number of elements)
-   Attributes, `attributes()` (metadata)

They differ in the types of their elements: all elements of an atomic vector must be the same type, whereas the elements of a list can have different types.

```{r, echo=F}

d2 <- data.frame(
 	c("Atomic vector", "List"),
	c("Matrix", "Data frame"),
c("Array", ""))


d2 <- t(d2)

colnames(d2) <-c("Homogeneous",	"Heterogeneous")

rownames(d2) <-c("1d",	"2d", "nd")

d2 <- as.data.frame(d2)

x <- d2
x
```

 

R has no 0-dimensional elements (scalars). Individual numbers or strings are actually vectors of length one.

<font size="5">Atomic vectors</font>

Types of atomic vectors:

-   Logical [(boolean)](https://en.wikipedia.org/wiki/Boolean)
-   Integer
-   Numeric (double)
-   Character

Vectors are built using `c()`:

```{r,collapse=TRUE}

x <- 1
x1 <- c(1)

all.equal(x, x1)

class(x)

y <- "something"

class(y)

w <- 1L

class(w)
 
z <- TRUE

class(z)

q <- factor(1)

class(q)

```

 

Vectors can only contain entries of the same type. Different types will be coerced to the most flexible type:

```{r, collapse=TRUE}

v <- c(10, 11, 12, 13)

class(v)

is.integer(v)

y <- c("Amazona", "Ara", "Eupsittula", "Myiopsitta")

class(y)

is.integer(y)

x <- c(1,2,3, "Myiopsitta")

x

class(x)

```

 

Missing values are specified with NA, which is a logical vector of length 1. NA will always be coerced to the correct type if used inside `c()`:

```{r, collapse=TRUE}

v <- c(10, 11, 12, 13, NA)

class(v)

v <- c(letters[1:3], NA)

class(v)

```

 

<font size="5">Lists</font>

Can contain objects of different classes and sizes. Lists are built using list():

```{r}

l <- list(ID = c("a", "b", "c", "d", "e"), 
          size = c(1, 2, 3, 4, 5), 
          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))

l

class(l)

str(l)

```

... and dimensions:

```{r}

l <- list(ID = c("a", "b", "c", "d", "e"), 
          size = c(1, 2, 3, 4, 5, 6), 
          observed = c(FALSE, TRUE, FALSE, FALSE, FALSE), 
          l)

str(l)

l2 <- list(l, l)

str(l2)

```

 

<font size="5">Attributes</font>

Objects can have attributes. Attributes allow to store metadata about the object. Attributes are kind of named lists. Attributes can be accessed individually with `attr()` or all at once (as a list) with `attributes()`:

```{r}
y <- 1:10

mean(y)

attr(y, "my_attribute") <- "This is an attribute"


attr(y, "my_attribute")


str(y)
```

 

Most attributes are lost when modifying a vector:

```{r}

attributes(y[1])

```

 

The only attributes not lost are the three most important:

-   Names, a character vector giving each element a name, described in names
-   Dimensions
-   Class

------------------------------------------------------------------------

```{r}
w <- structure(c(a =1, b = 2), my_attribute = "This is not an apple")

attributes(w)

attributes(w[1])

class(w[1])

```

 

<font size="5">Factors</font>

Attributes are used to define factors. A factor is a vector that can contain only predefined values, and is used to store categorical data.

Factors are built on top of integer vectors using two attributes:

-   class "factor": makes them behave differently from regular integer vectors
-   levels: defines the set of allowed values

```{r}

x <- factor(c("a", "b", "b", "a"))
x

levels(x)


str(x)

```

 

Factors look like character vectors but they are actually integers:

```{r}

x <- factor(c("a", "b", "b", "a"))

c(x)
```

 

<font size="5">Matrices</font>

All entries are of the same type:

```{r}
m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)

dim(m)

m

class(m)


m <- matrix(c(1, 2, 3, 11, 12,"13"), nrow = 2)
m


```

 

<font size="5">Data frames</font>

Special case of lists. Can contain entries of different types:

```{r}

m <- data.frame(ID = c("a", "b", "c", "d", "e"), 
                size = c(1, 2, 3, 4, 5), 
                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))

dim(m)

m

class(m)

is.data.frame(m)

is.list(m)

str(m)

```

 

But vectors should have the same length:

```{r, error = TRUE}

m <- data.frame(ID = c("a", "b", "c", "d", "e"), 
                size = c(1, 2, 3, 4, 5, 6), 
                observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))

```

 

------------------------------------------------------------------------

## Data subsetting

<font size="5">Indexing</font>

Elements within objects can be called by indexing. To subset a vector simply call the object position using square brackets:

```{r}

x <- c(1, 3, 4, 10, 15, 20, 50, 1, 6)

x[1]

x[2]

x[2:3]

x[c(1,3)]
```

 

Elements can be removed in the same way:

```{r}


x[-1]

x[-c(1,3)]

```

 

Matrices and data frames required 2 indices `[row, column]`:

```{r}

m <- matrix(c(1, 2, 3, 11, 12, 13), nrow = 2)

m[1, ]

m[, 1]

m[1, 1]

m[-1, ]

m[, -1]

m[-1, -1]


df <- data.frame(family = c("Psittacidae", "Trochilidae", 
                            "Psittacidae"), 
  genus = c("Amazona", "Phaethornis", "Ara"), 
	species = c("aestiva", "philippii", "ararauna"))

df

df[1, ]

df[, 1]

df[1, 1]

df[-1, ]

df[, -1]

df[-1, -1]

df[,"family"]

df[,c("family", "genus")]

```

 

Lists require 1 index within double square brackets `[[index]]`:

```{r}

l <- list(ID = c("a", "b", "c", "d", "e"), size = c(1, 2, 3, 4, 5), observed = c(FALSE, TRUE, FALSE, FALSE, FALSE))

l[[1]]

l[[3]]

```

 

Elements within lists can also be subset in the same string of code:

```{r}

l[[1]][1:2]

l[[3]][2]

```

 

<font size="5">Exploring objects</font>

```{r, eval = TRUE}

str(df)

names(df)

dim(df)

nrow(df)

ncol(df)

head(df)

tail(df)

table(df$genus)

typeof(df)

```

```{r, eval = F}
View(df)

```

 

::: {.alert .alert-info}
<font size="5">Exercise</font>

 

-   Using the example data `iris` to create a data subset with only the observations of the species 'setosa'

-   Now create a data subset containing the observations of both 'setosa' and 'versicolor'

-   Also with `iris` create a data subset with the observations for which `iris$Sepal.length` is higher than 6

-   How many observations have a sepal length higher than 6?
:::

 

------------------------------------------------------------------------

 

## Functions

All functions are created by the function `function()` and follow the same structure:

<img src="images/function.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund 2014</i></font>  

R comes with many functions that you can use to do sophisticated tasks:

```{r}
# built in functions
bi <- builtins()

length(bi)

sample(bi, 10)

```

 

Operators are functions:

```{r}

1 + 1


'+'(1, 1)

2 * 3


'*'(2, 3)


```

 

<font size="5">Most commonly used R operators</font>

Arithmetic operators:

```{r, echo=F}
d <- data.frame(
c("+" , "addition"),
c("-", 	"subtraction"),
c("*" ,	"multiplication"),
c("/",	"division"),
c("^ or **",	"exponent"),
c("x %% y",	"modulus (x mod y)"),
c("x %/% y",	"integer division"))


d <- t(d)

colnames(d) <- c("Operator      ", "Description   ")

d

```

 

```{r}

1 - 2

1 + 2

2 ^ 2


```

 

Logical operators:

```{r, echo=F}
d <- data.frame(
c("<", "less than"),
c("<=", "less than or equal to"),
c(">", "greater than"),
c(">=",	"greater than or equal to"),
c("==", "exactly equal to"),
c("!=",	"not equal to"),
c("!x",	"Not x"),
c("x | y", "	x OR y"),
c("x & y", 	"x AND y"),
c("x %in% y",	"match"))

d <- t(d)

colnames(d) <- c("Operator   ", "Description   ")

d

```

 

```{r}

1 < 2 

1 > 2 

1 <= 2 

1 == 2

1 != 2

1 > 2 

5 %in% 1:6

5 %in% 1:4
```

 

Most functions are vectorized:

```{r, eval=F}

1:6 * 1:6

```

<img src="images/vectorize.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund & Wickham 2017</i></font>

 

```{r, echo=F}

1:6 * 1:6
```

```{r}

1:6 - 1:6
```

R recycles vectors of unequal length:

```{r, eval=F}

1:6 * 1:5

```

<img src="images/recycle.png" alt="R" height="350" width="900"/>

<font size="2">\* Modified from <i>Grolemund & Wickham 2017</i></font>

 

```{r, echo=F}

1:6 * 1:5

```

```{r}

1:6 + 1:5

```

 

------------------------------------------------------------------------

## Style matters

<font size="2"><a href="https://google.github.io/styleguide/Rguide.xml">Based on google's R Style Guide</a></font>

<font size="5">File names</font>

File names should end in .R and, of course, be meaningful:

-   GOOD: predict_ad_revenue.R
-   BAD: foo.R

<font size="5">Object names</font>

Variables and functions:

-   Lowercase
-   Use an underscore (\_) (HW style)
-   Generally, nouns for variables and verbs for functions
-   Strive for names that are concise and meaningful (not always easy)
-   Avoid using names of existing functions of variables

```{r, eval=F}

  - GOOD: day_one: day_1, mean.day(),
  
  - BAD: dayOne, day1, firstDay_of.month, mean <- function(x) sum(x), c <- 10
```

 

<font size="5">Syntax</font>

Spacing:

-   Use spaces around operators and for argument within a function
-   Always put a space after a comma, and never before (just like in regular English)
-   Place a space before left parenthesis, except in a function call

```{r, eval=F}

  - GOOD: 
          a <- rnorm(n = 10, sd = 10, mean = 1)
          tab.prior <- table(df[df$days.from.opt < 0, "campaign.id"])
          total <- sum(x[, 1])
          total <- sum(x[1, ])
          if (debug)
          mean(1:10)
          
  - BAD: 
         a<-rnorm(n=10,sd=10,mean=1)
         tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  # Needs spaces around '<'
         tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  # Needs a space after the comma
         tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"])  # Needs a space before <-
         tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  # Needs spaces around <-
         total <- sum(x[,1])  # Needs a space after the comma
         total <- sum(x[ ,1])  # Needs a space after the comma, not before  
         if(debug) # Needs a space before parenthesis
         mean (1:10) # ) # Extra space before parenthesis

```

 

Curly braces:

-   An opening curly brace should never go on its own line
-   Closing curly brace should always go on its own line
-   You may omit curly braces when a block consists of a single statement

```{r eval=F}

  - GOOD:
              if (is.null(ylim)) {
              ylim <- c(0, 0.06)
            }
                      
            if (is.null(ylim))
              ylim <- c(0, 0.06)
          
  - BAD:
            
         if (is.null(ylim)) ylim <- c(0, 0.06)
                    
         if (is.null(ylim)) {ylim <- c(0, 0.06)} 

         if (is.null(ylim)) {
           ylim <- c(0, 0.06)
           } 
```

 

Assigments:

-   Use \<-, not =

```{r, eval = F}

  - GOOD:
         x <- 5 
          
  - BAD:
         x = 5
```

 

Commenting guidelines:

-   Comment your code
-   Entire commented lines should begin with \# and one space
-   Short comments can be placed after code preceded by two spaces, #, and then one space

```{r, eval=F}

# Create histogram of frequency of campaigns by pct budget spent.
hist(df$pct.spent,
     breaks = "scott",  # method for choosing number of buckets
     main   = "Histogram: fraction budget spent by campaignid",
     xlab   = "Fraction of budget spent",
     ylab   = "Frequency (count of campaignids)")
```

 

General Layout and Ordering (google style):

-   Copyright statement comment (?)
-   Author comment
-   File description comment, including purpose of program, inputs, and outputs
-   source() and library() statements
-   Function definitions
-   Executed statements, if applicable (e.g., print, plot)

------------------------------------------------------------------------

 

## R documentation

Most R resources are extremely well documented. So the first source for help you should go to when writting R code is the R documention itself. All packages are documented in the same standard way. Getting familiar with the format can simplify things a lot.

<font size="5">Package documentation</font>

<img src="images/packagepage.png" alt="R" height="900" width="800" style="border:3px solid gray"/>

 

<font size="5">Reference manuals</font>

Reference manuals are collections of the documentation for all functions in a package (only 1 per package):

-   [dynaSpec manual](https://cloud.r-project.org/web/packages/dynaSpec/dynaSpec.pdf)

-   [baRulho manual](https://cran.r-project.org/web/packages/baRulho/baRulho.pdf)

 

<font size="5">Function documentation</font>

All functions (default or from loaded packages) must have a documentation that follows a standard format:

```{r, eval=F}
?mean

help("mean")

```

<img src="images/documentation.png" alt="R" height="700" width="800" style="border:3px solid gray"/>  

This documentation can also be shown in Rstudio by pressing `F1` when the cursor is on the function name

 

If you don't recall the function name try `apropos()`:

```{r}
apropos("mean")

```

 

<font size="5">Vignettes</font>

Vignettes are illustrative documents or study cases detailing the use of a package (optional, can be several per package).

Vignettes can be called directly from R:

```{r}
vgn <- browseVignettes() 
```

```{r, eval = F}
vignette()
```

They should also be listed in the package CRAN page.

 

<font size="5">Demonstrations</font>

Packages may also include extended code demonstrations ('demos'). To list demos in a package run `demo("package name")`:

```{r, eval=F}
demo(package="stats")

# call demo directly
demo("nlm")

```

 

::: {.alert .alert-info}
<font size="5">Exercise</font>

 

-   What does the function `cut()` do?

-   What is the `breaks` argument in `cut()` used for?

-   Run the first 4 lines of code in the examples supplied in the `cut()` documentation

-   How many vignettes does the package warbleR has?
:::

 

------------------------------------------------------------------------

## References

-   [Advanced R, H Wickham](http://adv-r.had.co.nz/Data-structures.html)
-   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)\
-   Hands-On Programming with R (Grolemund, 2014)
